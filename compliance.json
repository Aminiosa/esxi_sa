{
  "100": {
    "Alert": "---->\nNot Secure level of image profile. Minimal level - Partner supported. To Fix:\n Foreach ($VMHost in Get-VMHost ) {\n$ESXCli = Get-EsxCli -VMHost $VMHost\\n$ESXCli.software.acceptance.Set(\"PartnerSupported\")\n}",
    "Instruction": "var = ''\nglobal pshData\npshData = list(filter(None, pshData.split(\"\\n\")))\nfor iter in pshData[1:]:\n iter = iter.split(':')\n var = iter[1].lstrip()\npshData = var",
    "Command": [
      "Foreach ($VMHost in Get-VMHost ) {",
      "$ESXCli = Get-EsxCli -VMHost $VMHost",
      "$VMHost | Select Name, @{N=\"AcceptanceLevel\";E={$ESXCli.software.acceptance.get()}}",
      "}"
    ],
    "Condition": "if pshData != \"PartnerSupported\":\n TOF = False",
    "Msg": "",
    "Name": "Acceptance Level",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "101": {
    "Alert": "---->\nunauthorized kernel modules might be loaded on the host. To Fix:\n $ESXCli = Get-EsxCli -VMHost MyHost\\n$ESXCli.system.module.set($false, $false, \"MyModuleName\")\n NOTE:evacuate VMs and place the host into maintenance mode before disabling kernel modules",
    "Instruction": "global pshData\npshData=pshResParser(pshData)",
    "Command": ["Foreach ($VMHost in Get-VMHost ) {",
      "$ESXCli = Get-EsxCli -VMHost $VMHost",
      "$ESXCli.system.module.list() | Foreach { Echo $_.Name;",
      "$ESXCli.system.module.get($_.Name) | Select @{N=\"VMHost\";E={$VMHost}}, Module,",
      "License,",
      "Modulefile,",
      "Version,",
      "SignedStatus",
      "#SignatureDigest,",
      "#SignatureFingerPrint",
      "} }"],
    "Condition": "for temp in pshData:\n    if pshData[temp]['SignedStatus'] == 'Unsigned':\n        TOF = False",
    "Msg": "Gathering kernel modules",
    "Name": "Kernel modules",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "102": {
    "Alert": "---->\nPlease configure NTP Server. Command: \n$NTPServers = \"pool.ntp.org\", \"pool2.ntp.org\" Get-VMHost | Add-VmHostNtpServer $NTPServers",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[1].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Select Name, @{N=\"NTPSetting\";E={$_ | Get-VMHostNtpServer}}|fl",
    "Condition": "if pshData == '' or pshData == None:\n        TOF = False",
    "Msg": "Checking NTP",
    "Name": "NTP Server",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "103": {
    "Alert": "---->\nPlease configure MOD Service. SSH Command: \nvim-cmd proxysvc/remove_service \"/mob\" \"httpsWithRedirect\"",
    "Instruction": "var = var[1:-3]",
    "Command": "vim-cmd proxysvc/service_list | grep  '/mob' -B 1 -A 2 | grep 'accessMode' | sed 's/.* = //' | sed 's/,//;s/\\n//'",
    "Condition": "if var != 'httpsWithRedirect' or var == None:\n        TOF = False",
    "Msg": "Checking MOB",
    "Name": "MOB AccessMode",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "ssh"
  },
  "104": {
    "Alert": "---->\nPlease configure SNMP Service. SSH Command: \nesxcli system snmp set --enable false",
    "Instruction": "var = var[0:-1]",
    "Command": "esxcli system snmp get|grep 'Enable'|sed 's/.*: //'",
    "Condition": "if var != 'false' or var == None:\n        TOF = False",
    "Msg": "Getting SNMP status",
    "Name": "SNMP status",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "ssh"
  },
  "105": {
    "Alert": "---->\nThere is no SyslogDir. Set Net.DVFilterBindIpAddress to null on all hosts. To fix:\n Get-VMHost HOST1 | Foreach { Set-VMHostAdvancedConfiguration -VMHost $_ -Name Net.DVFilterBindIpAddress -Value \"\" } ",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[1].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Select Name, @{N=\"Net.DVFilterBindIpAddress\";E={$_ | GetVMHostAdvancedConfiguration Net.DVFilterBindIpAddress | Select -ExpandProperty Values}} | fl",
    "Condition": "if pshData != '' and pshData != None:\n        TOF = False",
    "Msg": "Getting DVFilterBindIpAddress",
    "Name": "DVFilterBindIpAddress",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "106": {
    "Alert": "---->\nConfigure remote Dump Collector Server. To fix ssh commands:\n esxcli system coredump network set -v [VMK#] -i [DUMP_SERVER] -o [PORT]\nesxcli system coredump network set -e true I ",
    "Instruction": "var = list(filter(None, var.split('\\n')))\ntemp = {}\nfor item in range(0,len(var)):\n    var[item] = var[item].split(':')\n    for j in range(0,len(var[item])):\n        var[item][j] = var[item][j].lstrip()\n        var[item][j] = var[item][j].rstrip()\n    temp[var[item][0]] = var[item][1]\nvar = temp",
    "Command": "esxcli system coredump network get",
    "Condition": "if var['Enabled'] == 'false' or var['Enabled'] == None:\n        TOF = False",
    "Msg": "Getting Core Dump information",
    "Name": "CoreDumpConf",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "ssh"
  },
  "107": {
    "Alert": "---->\nThere is no logging dir. Set Syslog.global.logDir for each host. To fix:\n Get-VMHost | Foreach { Set-VMHostAdvancedConfiguration -VMHost $_ -Name\nSyslog.global.logHost -Value \"<NewLocation>\" }",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[1].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Select Name, @{N=\"Syslog.global.logDir\";E={$_ | GetVMHostAdvancedConfiguration Syslog.global.logDir | Select -ExpandProperty Values}} | fl",
    "Condition": "if pshData == '' or pshData == None:\n        TOF = False",
    "Msg": "Getting Syslog Config",
    "Name": "SyslogConf",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "108": {
    "Alert": "---->\nThere is no logging host. Set Syslog.global.logHost for each host. To fix:\n Get-VMHost | Foreach { Set-VMHostAdvancedConfiguration -VMHost $_ -Name\nSyslog.global.logDir -Value \"<NewLocation>\" }",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[1].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Select Name, @{N=\"Syslog.global.logHost\";E={$_ | GetVMHostAdvancedConfiguration Syslog.global.logHost | Select -ExpandProperty Values}} | fl",
    "Condition": "if pshData == '' or pshData == None:\n        TOF = False",
    "Msg": "Getting Remote log host",
    "Name": "RemoteLogHOST",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "109": {
    "Alert": "---->\nThere is no AD Authentication. Join the ESXI Host to the Domain. To fix:\n Get-VMHost HOST1 | Get-VMHostAuthentication | Set-VMHostAuthentication -Domain domain.local -User Administrator -Password Passw0rd -JoinDomain",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[1].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Get-VMHostAuthentication | Select VmHost, Domain, DomainMembershipStatus | fl",
    "Condition": "if pshData == '' or pshData == None:\n        TOF = False",
    "Msg": "Checking connection to domain",
    "Name": "Domain",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "110": {
    "Alert": "---->\nSet DCUI to start manually rather than automatic for all hosts. To fix: \nGet-VMHost | Get-VMHostService | Where { $_.key -eq \"DCUI\" } | Set-VMHostService -Policy Off",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[0].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Get-VMHostService | Where { $_.key -eq \"DCUI\" } | Select-Object Policy | fl",
    "Condition": "if pshData == '' or pshData != 'off':\n        TOF = False",
    "Msg": "Checking connection to domain",
    "Name": "DCUI status",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "111": {
    "Alert": "---->\nSet ESXi Shell to start manually rather than automatic for all hosts. To fix: \nGet-VMHost | Get-VMHostService | Where { $_.key -eq \"TSM\" } | Set-VMHostService -Policy Off",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[0].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Get-VMHostService | Where { $_.key -eq \"TSM\" } | Select Policy | fl ",
    "Condition": "if pshData == '' or pshData != 'off':\n        TOF = False",
    "Msg": "Checking connection to domain",
    "Name": "ESXIShell status",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "112": {
    "Alert": "---->\nSet SSH to start manually rather than automatic for all hosts. To fix: \nGet-VMHost | Get-VMHostService | Where { $_.key -eq \"TSM-SSH\" } | Set-VMHostService -Policy Off",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[0].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Get-VMHostService | Where { $_.key -eq \"TSM\" } | Select Policy | fl ",
    "Condition": "if pshData == '' or pshData != 'off':\n        TOF = False",
    "Msg": "Checking connection to domain",
    "Name": "SSH status",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "113": {
    "Alert": "---->\nSet Remove UserVars.ESXiShellInteractiveTimeOut to 300 on all hosts. To fix: \nGet-VMHost | Foreach { Set-VMHostAdvancedConfiguration -VMHost $_ -Name UserVars.ESXiShellInteractiveTimeOut -Value 300 }",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[0].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Select @{N=\"UserVars.ESXiShellInteractiveTimeOut\";E={$_ | GetVMHostAdvancedConfiguration UserVars.ESXiShellInteractiveTimeOut | Select -ExpandProperty Values}} | fl",
    "Condition": "if pshData == '' or pshData != '300':\n        TOF = False",
    "Msg": "Checking connection to domain",
    "Name": "Shell TimeOut",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  },
  "114": {
    "Alert": "---->\nSet Remove UserVars.ESXiShellInteractiveTimeOut to 300 on all hosts. To fix: \nGet-VMHost | Foreach { Set-VMHostAdvancedConfiguration -VMHost $_ -Name UserVars.ESXiShellInteractiveTimeOut -Value 300 }",
    "Instruction": "pshData = list(filter(None, pshData.split('\\n')));pshData=pshData[0].split(':');pshData=pshData[1].lstrip()",
    "Command": "Get-VMHost | Select @{N=\"UserVars.ESXiShellInteractiveTimeOut\";E={$_ | GetVMHostAdvancedConfiguration UserVars.ESXiShellInteractiveTimeOut | Select -ExpandProperty Values}} | fl",
    "Condition": "if pshData == '' or pshData != '300':\n        TOF = False",
    "Msg": "Checking connection to domain",
    "Name": "Shell TimeOut",
    "Parent": "NULL",
    "Ver": "5",
    "VerM": "99",
    "type": "psh"
  }

}